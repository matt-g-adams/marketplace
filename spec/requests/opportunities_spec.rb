require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/opportunities", type: :request do
  before do
    Client.create!(email: 'recruiting@wolf.xyz', name: 'Wolf')
  end
  # This should return the minimal set of attributes required to create a valid
  # Opportunity. As you add validations to Opportunity, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      client_id: 1,
      salary: 170,
      title: 'Staff Engineer',
      description: 'Proven experience (minimum 3 years) as a Senior/Staff Engineer, Technical Lead, or similar role in a high-scale production environment.'
    }
  }

  let(:invalid_attributes) {
    {
      client_id: 0
    }
  }

  let(:valid_job_application_attributes) {
    {
      job_seeker_id: 1,
      opportunity_id: 1
    }
  }

  let(:invalid_job_application_attributes) {
    {
      job_seeker_id: 0
    }
  }

  describe "GET /index" do
    before do
      Opportunity.create! valid_attributes
    end

    it "responds with a 200 http status code" do
      get opportunities_url
      expect(response).to have_http_status(:ok)
    end

    it "responds with json" do
      get opportunities_url
      expect(response.content_type).to eq("application/json; charset=utf-8")
    end

    it "renders the opportunity" do
      get opportunities_url
      expect(response.body).to include("Staff Engineer")
    end

    context 'with limit of 1' do
      it 'renders the opportunity' do
        get opportunities_url, params: { limit: 1 }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with limit of 0' do
      it 'renders the opportunity' do
        get opportunities_url, params: { limit: 0 }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with lower after_id' do
      it 'renders the opportunity' do
        get opportunities_url, params: { after_id: 0 }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with same after_id' do
      it 'renders the opportunity' do
        get opportunities_url, params: { after_id: 1 }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with same client_id' do
      it 'renders the opportunity' do
        get opportunities_url, params: { client_id: 1 }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with different client_id' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { client_id: 2 }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with same client_email' do
      it 'renders the opportunity' do
        get opportunities_url, params: { client_email: 'recruiting@wolf.xyz' }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with different client_email' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { client_email: 'foo@bar.com' }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with same client_name' do
      it 'renders the opportunity' do
        get opportunities_url, params: { client_name: 'Wolf' }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with different client_name' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { client_name: 'Foo' }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with same min_salary' do
      it 'renders the opportunity' do
        get opportunities_url, params: { min_salary: 170 }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with higher min_salary' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { min_salary: 180 }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with text in title' do
      it 'renders the opportunity' do
        get opportunities_url, params: { title: 'Staff' }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with text not in title' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { title: 'React' }
        expect(response.body).to_not include("Staff Engineer")
      end
    end

    context 'with text in description' do
      it 'renders the opportunity' do
        get opportunities_url, params: { description: 'Staff' }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context 'with text not in title' do
      it 'does not render the opportunity' do
        get opportunities_url, params: { description: 'React' }
        expect(response.body).to_not include("Staff Engineer")
      end
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Opportunity" do
        expect {
          post opportunities_url, params: { opportunity: valid_attributes }
        }.to change(Opportunity, :count).by(1)
      end

      it "responds with http created status code" do
        post opportunities_url, params: { opportunity: valid_attributes }
        expect(response).to have_http_status(:created)
      end

      it 'renders json' do
        post opportunities_url, params: { opportunity: valid_attributes }
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end

      it 'renders the created opportunity' do
        post opportunities_url, params: { opportunity: valid_attributes }
        expect(response.body).to include('Staff Engineer')
        expect(response.body).to include('Technical Lead')
      end
    end

    context "with invalid parameters" do
      it "does not create a new Opportunity" do
        expect {
          post opportunities_url, params: { opportunity: invalid_attributes }
        }.to change(Opportunity, :count).by(0)
      end

      it "responds with http 422 status code" do
        post opportunities_url, params: { opportunity: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end

      it 'renders json' do
        post opportunities_url, params: { opportunity: invalid_attributes }
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe 'POST /:id/apply' do
    before do
      JobSeeker.create!(name: 'Matthew Adams')
      Opportunity.create!(valid_attributes)
    end

    context 'with valid parameters' do
      it "creates a new JobApplication" do
        expect {
          post apply_opportunity_url(id: 1), params: { job_application: valid_job_application_attributes }
        }.to change(JobApplication, :count).by(1)
      end

      it 'responds with http created status code' do
        post apply_opportunity_url(id: 1), params: { job_application: valid_job_application_attributes }
        expect(response).to have_http_status(:created)
      end

      it 'renders json' do
        post apply_opportunity_url(id: 1), params: { job_application: valid_job_application_attributes }
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end

      it 'renders the created JobApplication' do
        post apply_opportunity_url(id: 1), params: { job_application: valid_job_application_attributes }
        expect(response.body).to include('"opportunity_id":1')
      end
    end

    context 'with invalid opportunity id' do
      it 'should respond with http not found status code' do
        post apply_opportunity_url(id: 0), params: { job_application: valid_job_application_attributes }
        expect(response).to have_http_status(:not_found)
      end
    end

    context 'with invalid parameters' do
      it "does not create a new JobApplication" do
        expect {
          post apply_opportunity_url(id: 1), params: { job_application: invalid_job_application_attributes }
        }.to change(JobApplication, :count).by(0)
      end

      it 'responds with http unprocessable_content status code' do
        post apply_opportunity_url(id: 1), params: { job_application: invalid_job_application_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end

      it 'renders json' do
        post apply_opportunity_url(id: 1), params: { job_application: invalid_job_application_attributes }
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end
end
